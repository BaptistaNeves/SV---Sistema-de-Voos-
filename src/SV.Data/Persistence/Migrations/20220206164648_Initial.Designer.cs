// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SV.Data.Persistence.Context;

namespace SV.Data.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220206164648_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Aeronave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalDeAssentos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Aeronaves");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Assento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AeronaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AeronaveId");

                    b.HasIndex("ClasseId");

                    b.ToTable("Assentos");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Classe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeroportos.Aeroporto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("Aeroportos");
                });

            modelBuilder.Entity("SV.Core.Entities.Cidades.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Assento", b =>
                {
                    b.HasOne("SV.Core.Entities.Aeronaves.Aeronave", "Aeronave")
                        .WithMany("Assentos")
                        .HasForeignKey("AeronaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SV.Core.Entities.Aeronaves.Classe", "Classe")
                        .WithMany("Assentos")
                        .HasForeignKey("ClasseId")
                        .IsRequired();

                    b.Navigation("Aeronave");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeroportos.Aeroporto", b =>
                {
                    b.HasOne("SV.Core.Entities.Cidades.Cidade", "Cidade")
                        .WithMany("Aeroportos")
                        .HasForeignKey("CidadeId")
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Aeronave", b =>
                {
                    b.Navigation("Assentos");
                });

            modelBuilder.Entity("SV.Core.Entities.Aeronaves.Classe", b =>
                {
                    b.Navigation("Assentos");
                });

            modelBuilder.Entity("SV.Core.Entities.Cidades.Cidade", b =>
                {
                    b.Navigation("Aeroportos");
                });
#pragma warning restore 612, 618
        }
    }
}
